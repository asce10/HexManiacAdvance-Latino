<UserControl x:Class="HavenSoft.HexManiac.WPF.Controls.MapTab"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:res="clr-namespace:HavenSoft.HexManiac.WPF.Resources"
             xmlns:local="clr-namespace:HavenSoft.HexManiac.WPF.Controls"
             xmlns:tools="clr-namespace:HavenSoft.HexManiac.Core.ViewModels.Tools;assembly=HexManiac.Core"
             xmlns:map="clr-namespace:HavenSoft.HexManiac.Core.ViewModels.Map;assembly=HexManiac.Core"
             Focusable="True">
   <UserControl.Resources>
      <local:EqualityToBooleanConverter x:Key="Equality" />
      <DataTemplate DataType="{x:Type tools:VisualComboOption}">
         <local:PixelImage />
      </DataTemplate>
   </UserControl.Resources>
   <UserControl.InputBindings>
      <KeyBinding Key="Left" Command="{Binding PanCommand}" CommandParameter="{x:Static map:MapDirection.Left}" />
      <KeyBinding Key="Right" Command="{Binding PanCommand}" CommandParameter="{x:Static map:MapDirection.Right}" />
      <KeyBinding Key="Up" Command="{Binding PanCommand}" CommandParameter="{x:Static map:MapDirection.Up}" />
      <KeyBinding Key="Down" Command="{Binding PanCommand}" CommandParameter="{x:Static map:MapDirection.Down}" />
      <KeyBinding Key="Add" Command="{Binding ZoomCommand}" CommandParameter="{x:Static map:ZoomDirection.Enlarge}" />
      <KeyBinding Key="Subtract" Command="{Binding ZoomCommand}" CommandParameter="{x:Static map:ZoomDirection.Shrink}" />
      <KeyBinding Key="Escape" Command="{Binding CancelCommand}" />
      <KeyBinding Key="Delete" Command="{Binding DeleteCommand}" />
      <KeyBinding Key="Backspace" Command="{Binding DeleteCommand}" />
   </UserControl.InputBindings>
   <Grid ClipToBounds="True">
      <Grid.ColumnDefinitions>
         <ColumnDefinition Width="Auto" />
         <ColumnDefinition Width="*" />
      </Grid.ColumnDefinitions>
      <Grid.RowDefinitions>
         <RowDefinition Height="Auto" />
         <RowDefinition Height="*" />
      </Grid.RowDefinitions>
      <DockPanel Grid.Column="0" Grid.RowSpan="2" Panel.ZIndex="1" Name="BlockPanel" Background="{DynamicResource Background}">
         <Grid Width="{Binding Blocks.ScaledWidth}" Height="100" DockPanel.Dock="Top">
            <local:AngleComboBox HorizontalAlignment="Right" VerticalAlignment="Bottom" Margin="10" Width="50" Height="20"
               ItemsSource="{Binding CollisionOptions}" SelectedIndex="{Binding CollisionIndex}" />
            <Decorator Visibility="{Binding DrawMultipleTiles, Converter={StaticResource BoolToVisibility}}" HorizontalAlignment="Center" VerticalAlignment="Center">
               <local:PixelImage DataContext="{Binding MultiTileDrawRender}" />
            </Decorator>
         </Grid>
         <ScrollViewer Name="BlockViewer">
            <Canvas Width="{Binding Blocks.ScaledWidth}" Height="{Binding Blocks.ScaledHeight}">
               <local:PixelImage DataContext="{Binding Blocks}" MouseLeftButtonDown="BlocksDown" />
               <Rectangle Name="BlockSelectionRect" Margin="-1,-1,0,0" StrokeThickness="1" Opacity=".5" 
                  Stroke="{DynamicResource Background}" Fill="{DynamicResource Primary}"
                  Width="{Binding HighlightBlockSize}" Height="{Binding HighlightBlockSize}"
                  Canvas.Left="{Binding HighlightBlockX}" Canvas.Top="{Binding HighlightBlockY}" />
            </Canvas>
         </ScrollViewer>
      </DockPanel>
      <ScrollViewer Grid.Column="0" Grid.RowSpan="2" Background="{DynamicResource Background}" Panel.ZIndex="1" Name="EventPanel"
         Width="{Binding ActualWidth, ElementName=BlockPanel}"
         Visibility="{Binding ShowEventPanel, Converter={StaticResource BoolToVisibility}}">
         <DockPanel>
            <Grid DockPanel.Dock="Top">
               <Grid.ColumnDefinitions>
                  <ColumnDefinition />
                  <ColumnDefinition />
                  <ColumnDefinition />
                  <ColumnDefinition />
                  <ColumnDefinition />
               </Grid.ColumnDefinitions>
               <local:AngleButton Grid.Column="0" Content="Group" Direction="Left" VerticalAlignment="Bottom"
                  Command="{Binding SelectedEvent.CycleEventCommand}" CommandParameter="{x:Static map:EventCycleDirection.PreviousCategory}" />
               <local:AngleButton Grid.Column="1" Content="Event" Direction="Left" VerticalAlignment="Bottom"
                  Command="{Binding SelectedEvent.CycleEventCommand}" CommandParameter="{x:Static map:EventCycleDirection.PreviousEvent}" />
               <StackPanel Grid.Column="2">
                  <TextBlock TextAlignment="Center" Text="{Binding SelectedEvent.EventType}" />
                  <local:AngleBorder Direction="Out">
                     <TextBlock TextAlignment="Center" Text="{Binding SelectedEvent.EventIndex}" />
                  </local:AngleBorder>
               </StackPanel>
               <local:AngleButton Grid.Column="3" Content="Event" Direction="Right" VerticalAlignment="Bottom"
                  Command="{Binding SelectedEvent.CycleEventCommand}" CommandParameter="{x:Static map:EventCycleDirection.NextEvent}" />
               <local:AngleButton Grid.Column="4" Content="Group" Direction="Right" VerticalAlignment="Bottom"
                  Command="{Binding SelectedEvent.CycleEventCommand}" CommandParameter="{x:Static map:EventCycleDirection.NextCategory}" />
            </Grid>
            <ContentControl DataContext="{Binding SelectedEvent}" Content="{Binding}">
               <ContentControl.Resources>
                  <DataTemplate DataType="{x:Type map:ObjectEventModel}">
                     <Grid VerticalAlignment="Top">
                        <Grid.ColumnDefinitions>
                           <ColumnDefinition />
                           <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                           <RowDefinition /> <RowDefinition />
                           <RowDefinition /> <RowDefinition />
                           <RowDefinition /> <RowDefinition />
                           <RowDefinition /> <RowDefinition />
                           <RowDefinition /> <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <StackPanel Margin="2,2,0,2">
                           <local:AngleBorder Direction="Out">
                              <TextBlock Text="ID:"/>
                           </local:AngleBorder>
                           <local:AngleTextBox Direction="Out" TextBinding="{Binding ObjectID}" />
                        </StackPanel>
                     
                        <local:AngleComboBox Grid.Row="0" Grid.Column="1" Direction="Right" SelectedIndex="{Binding Graphics}" ItemsSource="{Binding Options}" Margin="0,2,2,2">
                           <local:AngleComboBox.ItemsPanel>
                              <ItemsPanelTemplate>
                                 <WrapPanel Width="130" />
                              </ItemsPanelTemplate>
                           </local:AngleComboBox.ItemsPanel>
                        </local:AngleComboBox>

                        <local:AngleBorder Grid.Row="1" VerticalAlignment="Top" Direction="Left" Margin="2,2,0,2">
                           <TextBlock Text="(x, y):" />
                        </local:AngleBorder>
                        <local:AngleTextBox Grid.Row="1" Grid.Column="1" Margin="0,2,2,2" VerticalAlignment="Top" Direction="Out" TextBinding="{Binding XY, UpdateSourceTrigger=PropertyChanged}" />

                        <local:AngleBorder Grid.Row="2" VerticalAlignment="Top" Direction="Left" Margin="2,2,0,2">
                           <TextBlock Text="Elevation:"/>
                        </local:AngleBorder>
                        <local:AngleTextBox Grid.Row="2" Grid.Column="1" Margin="0,2,2,2" VerticalAlignment="Top" Direction="Out" TextBinding="{Binding Elevation}" />

                        <local:AngleBorder Grid.Row="3" VerticalAlignment="Top" Direction="Out" Margin="2,2,0,2">
                           <TextBlock Text="Movement Type:"/>
                        </local:AngleBorder>
                        <local:AngleComboBox Grid.Row="3" Grid.Column="1" Margin="0,2,2,2" VerticalAlignment="Top" Direction="Right" SelectedIndex="{Binding MoveType}" ItemsSource="{Binding FacingOptions}" />

                        <local:AngleBorder Grid.Row="4" VerticalAlignment="Top" Direction="Left" Margin="2,2,0,2">
                           <TextBlock Text="Range:" />
                        </local:AngleBorder>
                        <local:AngleTextBox Grid.Row="4" Grid.Column="1" VerticalAlignment="Top" Margin="0,2,2,2" Direction="Out" TextBinding="{Binding RangeXY, UpdateSourceTrigger=PropertyChanged}" />

                        <local:AngleBorder Grid.Row="5" VerticalAlignment="Top" Direction="Left" Margin="2,2,0,2">
                           <TextBlock Text="Trainer Type:"/>
                        </local:AngleBorder>
                        <local:AngleTextBox Grid.Row="5" Grid.Column="1" VerticalAlignment="Top" Margin="0,2,2,2" Direction="Out" TextBinding="{Binding TrainerType}" />

                        <local:AngleBorder Grid.Row="6" VerticalAlignment="Top" Direction="Left" Margin="2,2,0,2">
                           <TextBlock>
                              <TextBlock.Style>
                                 <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                                    <Setter Property="Text" Value="Trainer Range:" />
                                    <Style.Triggers>
                                       <DataTrigger Binding="{Binding TrainerType}" Value="0">
                                          <Setter Property="Text" Value="Berry ID:" />
                                       </DataTrigger>
                                    </Style.Triggers>
                                 </Style>
                              </TextBlock.Style>
                           </TextBlock>
                        </local:AngleBorder>
                        <local:AngleTextBox Grid.Row="6" Grid.Column="1" VerticalAlignment="Top" Margin="0,2,2,2" Direction="Out" TextBinding="{Binding TrainerRangeOrBerryID}" />

                        <local:AngleBorder Grid.Row="7" VerticalAlignment="Top" Direction="Left" Margin="2,2,0,2">
                           <TextBlock Text="Script Address:"/>
                        </local:AngleBorder>
                        <local:AngleTextBox Grid.Row="7" Grid.Column="1" VerticalAlignment="Top" Margin="0,2,21,2" Direction="Out" TextBinding="{Binding ScriptAddressText, UpdateSourceTrigger=PropertyChanged}" />
                        <local:AngleButton Command="{res:MethodCommand GotoScript}" Direction="Right" Grid.Row="7" Grid.Column="1" HorizontalAlignment="Right"
                              Width="22" Height="18" IsTabStop="False" Padding="0,2" BorderBrush="{DynamicResource Backlight}">
                           <Path Data="{res:Icon RightAngleArrow}" Fill="{DynamicResource Secondary}" Stretch="Fill" />
                        </local:AngleButton>

                        <local:AngleBorder Grid.Row="8" VerticalAlignment="Top" Direction="Left" Margin="2,2,0,2">
                           <TextBlock Text="Flag:"/>
                        </local:AngleBorder>
                        <local:AngleTextBox Grid.Row="8" Grid.Column="1" VerticalAlignment="Top" Margin="0,2,2,2" Direction="Out" TextBinding="{Binding FlagText}" />

                        <StackPanel Margin="2,12" Grid.Row="9" Grid.ColumnSpan="2" Visibility="{Binding ShowTrainerContent, Converter={StaticResource BoolToVisibility}}">
                           <StackPanel.Resources>
                              <Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
                                 <Setter Property="FontFamily" Value="Consolas" />
                                 <Setter Property="AcceptsReturn" Value="True" />
                                 <Setter Property="HorizontalAlignment" Value="Right" />
                                 <Setter Property="Width" Value="236" />
                              </Style>
                           </StackPanel.Resources>
                           <Grid>
                              <Grid.ColumnDefinitions>
                                 <ColumnDefinition />
                                 <ColumnDefinition />
                              </Grid.ColumnDefinitions>
                              <local:AngleComboBox Direction="Out" ItemsSource="{Binding ClassOptions}" SelectedIndex="{Binding TrainerClass}" />
                              <local:AngleTextBox Grid.Column="1" TextBinding="{Binding TrainerName}" Direction="Right" />
                           </Grid>
                           <local:AngleBorder Direction="Right" HorizontalAlignment="Left" Margin="4,10,0,0">
                              <TextBlock Text="Before Battle:" Margin="4,0"/>
                           </local:AngleBorder>
                           <TextBox Text="{Binding TrainerBeforeText}" />
                           <local:AngleBorder Direction="Right" HorizontalAlignment="Left" Margin="4,10,0,0">
                              <TextBlock Text="When You Win:" Margin="4,0"/>
                           </local:AngleBorder>
                           <TextBox Text="{Binding TrainerWinText}" />
                           <local:AngleBorder Direction="Right" HorizontalAlignment="Left" Margin="4,10,0,0">
                              <TextBlock Text="After Battle:" Margin="4,0"/>
                           </local:AngleBorder>
                           <TextBox Text="{Binding TrainerAfterText}" />
                           <local:AngleBorder Direction="Right" HorizontalAlignment="Left" Margin="4,10,0,0">
                              <TextBlock Text="Team:" Margin="4,0"/>
                           </local:AngleBorder>
                           <Grid Background="{DynamicResource Backlight}" Width="230" HorizontalAlignment="Right">
                              <Viewbox HorizontalAlignment="Right" Height="{Binding ActualHeight, ElementName=TrainerTeamBox}" Stretch="Uniform" IsHitTestVisible="False" Opacity=".5">
                                 <ItemsControl ItemsSource="{Binding TeamVisualizations}">
                                    <ItemsControl.ItemTemplate>
                                       <DataTemplate>
                                          <local:PixelImage TransparentBrush="{DynamicResource Backlight}"/>
                                       </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                 </ItemsControl>
                              </Viewbox>
                              <TextBox VerticalAlignment="Top" Text="{Binding TrainerTeam, UpdateSourceTrigger=PropertyChanged}" Name="TrainerTeamBox" Background="Transparent" CaretBrush="{DynamicResource Secondary}" />
                           </Grid>
                           <local:AngleBorder Direction="Right" HorizontalAlignment="Left" Margin="4,10,0,0">
                              <TextBlock Text="Edit More:" Margin="4,0"/>
                           </local:AngleBorder>
                           <local:AngleButton Direction="Right" HorizontalAlignment="Right" Command="{Binding OpenTrainerData}">
                              <local:PixelImage TransparentBrush="{DynamicResource Backlight}" DataContext="{Binding TrainerSprite}" />
                           </local:AngleButton>
                        </StackPanel>

                        <StackPanel Margin="2,12" Grid.Row="9" Grid.ColumnSpan="2" Visibility="{Binding ShowItemContents, Converter={StaticResource BoolToVisibility}}">
                           <Grid>
                              <Grid.ColumnDefinitions>
                                 <ColumnDefinition />
                                 <ColumnDefinition />
                              </Grid.ColumnDefinitions>
                              <local:AngleBorder Direction="Left">
                                 <TextBlock Text="Item:" Margin="4,0"/>
                              </local:AngleBorder>
                              <local:AngleComboBox Grid.Column="1" Direction="Out" ItemsSource="{Binding ItemOptions}" SelectedIndex="{Binding ItemContents}" />
                           </Grid>
                        </StackPanel>

                        <StackPanel Margin="2,12" Grid.Row="9" Grid.ColumnSpan="2" Visibility="{Binding ShowNpcText, Converter={StaticResource BoolToVisibility}}">
                           <local:AngleBorder Direction="Right" HorizontalAlignment="Left" Margin="4,10,0,0">
                              <TextBlock Text="Text:" Margin="4,0"/>
                           </local:AngleBorder>
                           <TextBox FontFamily="Consolas" AcceptsReturn="True" HorizontalAlignment="Right" Width="236" Text="{Binding NpcText}" />
                        </StackPanel>
                     </Grid>
                  </DataTemplate>
                  <DataTemplate DataType="{x:Type map:WarpEventModel}">
                     <Grid VerticalAlignment="Top">
                        <Grid.ColumnDefinitions>
                           <ColumnDefinition />
                           <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                           <RowDefinition /> <RowDefinition />
                           <RowDefinition /> <RowDefinition />
                           <RowDefinition /> <RowDefinition />
                           <RowDefinition /> <RowDefinition />
                           <RowDefinition />
                        </Grid.RowDefinitions>

                        <local:AngleBorder Grid.Row="1" VerticalAlignment="Top" Direction="Left" Margin="2,2,0,2">
                           <TextBlock Text="(x, y):" />
                        </local:AngleBorder>
                        <local:AngleTextBox Grid.Row="1" Grid.Column="1" VerticalAlignment="Top" Margin="0,2,2,2" Direction="Out" TextBinding="{Binding XY, UpdateSourceTrigger=PropertyChanged}" />

                        <local:AngleBorder Grid.Row="2" VerticalAlignment="Top" Direction="Left" Margin="2,2,0,2">
                           <TextBlock Text="Elevation:"/>
                        </local:AngleBorder>
                        <local:AngleTextBox Grid.Row="2" Grid.Column="1" VerticalAlignment="Top" Margin="0,2,2,2" Direction="Out" TextBinding="{Binding Elevation}" />

                        <local:AngleBorder Grid.Row="3" VerticalAlignment="Top" Direction="Left" Margin="2,2,0,2">
                           <TextBlock Text="(bank, map):"/>
                        </local:AngleBorder>
                        <StackPanel Grid.Row="3" Grid.Column="1" VerticalAlignment="Top" Margin="0,2,2,2">
                           <local:AngleTextBox Direction="Out" TextBinding="{Binding BankMap}" />
                           <TextBlock Text="{Binding TargetMapName}" />
                        </StackPanel>

                        <local:AngleBorder Grid.Row="4" VerticalAlignment="Top" Direction="Left" Margin="2,2,0,2">
                           <TextBlock Text="Destination ID:"/>
                        </local:AngleBorder>
                        <local:AngleTextBox Grid.Row="4" Grid.Column="1" VerticalAlignment="Top" Margin="0,2,2,2" Direction="Out" TextBinding="{Binding WarpID}" />
                     </Grid>
                  </DataTemplate>
                  <DataTemplate DataType="{x:Type map:ScriptEventModel}">
                     <Grid VerticalAlignment="Top">
                        <Grid.ColumnDefinitions>
                           <ColumnDefinition />
                           <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                           <RowDefinition /> <RowDefinition />
                           <RowDefinition /> <RowDefinition />
                           <RowDefinition /> <RowDefinition />
                           <RowDefinition /> <RowDefinition />
                           <RowDefinition />
                        </Grid.RowDefinitions>

                        <local:AngleBorder Grid.Row="1" VerticalAlignment="Top" Direction="Left" Margin="2,2,0,2">
                           <TextBlock Text="(x, y):" />
                        </local:AngleBorder>
                        <local:AngleTextBox Grid.Row="1" Grid.Column="1" VerticalAlignment="Top" Margin="0,2,2,2" Direction="Out" TextBinding="{Binding XY, UpdateSourceTrigger=PropertyChanged}" />

                        <local:AngleBorder Grid.Row="2" VerticalAlignment="Top" Direction="Left" Margin="2,2,0,2">
                           <TextBlock Text="Elevation:"/>
                        </local:AngleBorder>
                        <local:AngleTextBox Grid.Row="2" Grid.Column="1" VerticalAlignment="Top" Margin="0,2,2,2" Direction="Out" TextBinding="{Binding Elevation}" />

                        <local:AngleBorder Grid.Row="3" VerticalAlignment="Top" Direction="Left" Margin="2,2,0,2">
                           <TextBlock Text="Trigger:"/>
                        </local:AngleBorder>
                        <local:AngleTextBox Grid.Row="3" Grid.Column="1" VerticalAlignment="Top" Margin="0,2,2,2" Direction="Out" TextBinding="{Binding Trigger}" />

                        <local:AngleBorder Grid.Row="4" VerticalAlignment="Top" Direction="Left" Margin="2,2,0,2">
                           <TextBlock Text="Index:"/>
                        </local:AngleBorder>
                        <local:AngleTextBox Grid.Row="4" Grid.Column="1" VerticalAlignment="Top" Margin="0,2,2,2" Direction="Out" TextBinding="{Binding Index}" />

                        <local:AngleBorder Grid.Row="7" VerticalAlignment="Top" Direction="Left" Margin="2,2,0,2">
                           <TextBlock Text="Script Address:"/>
                        </local:AngleBorder>
                        <local:AngleTextBox Grid.Row="7" Grid.Column="1" VerticalAlignment="Top" Margin="0,2,21,2" Direction="Out" TextBinding="{Binding ScriptAddressText, UpdateSourceTrigger=PropertyChanged}" />
                        <local:AngleButton Command="{res:MethodCommand GotoScript}" Direction="Right" Grid.Row="7" Grid.Column="1" HorizontalAlignment="Right"
                              Width="22" Height="18" IsTabStop="False" Padding="0,2" BorderBrush="{DynamicResource Backlight}">
                           <Path Data="{res:Icon RightAngleArrow}" Fill="{DynamicResource Secondary}" Stretch="Fill" />
                        </local:AngleButton>

                     </Grid>
                  </DataTemplate>
                  <DataTemplate DataType="{x:Type map:SignpostEventModel}">
                     <Grid VerticalAlignment="Top">
                        <Grid.ColumnDefinitions>
                           <ColumnDefinition />
                           <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                           <RowDefinition /> <RowDefinition />
                           <RowDefinition /> <RowDefinition />
                           <RowDefinition /> <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <local:AngleBorder Grid.Row="1" VerticalAlignment="Top" Direction="Left" Margin="2,2,0,2">
                           <TextBlock Text="(x, y):" />
                        </local:AngleBorder>
                        <local:AngleTextBox Grid.Row="1" Grid.Column="1" VerticalAlignment="Top" Margin="0,2,2,2" Direction="Out" TextBinding="{Binding XY, UpdateSourceTrigger=PropertyChanged}" />

                        <local:AngleBorder Grid.Row="2" VerticalAlignment="Top" Direction="Left" Margin="2,2,0,2">
                           <TextBlock Text="Elevation:"/>
                        </local:AngleBorder>
                        <local:AngleTextBox Grid.Row="2" Grid.Column="1" VerticalAlignment="Top" Margin="0,2,2,2" Direction="Out" TextBinding="{Binding Elevation}" />

                        <local:AngleBorder Grid.Row="3" VerticalAlignment="Top" Direction="Left" Margin="2,2,0,2">
                           <TextBlock Text="Kind:"/>
                        </local:AngleBorder>
                        <local:AngleTextBox Grid.Row="3" Grid.Column="1" VerticalAlignment="Top" Margin="0,2,2,2" Direction="Out" TextBinding="{Binding Kind}" />

                        <local:AngleBorder Grid.Row="4" VerticalAlignment="Top" Direction="Left" Margin="2,2,0,2">
                           <TextBlock Text="Arg:"/>
                        </local:AngleBorder>
                        <local:AngleTextBox Grid.Row="4" Grid.Column="1" VerticalAlignment="Top" Margin="0,2,2,2" Direction="Out" TextBinding="{Binding Arg}" />

                        <StackPanel Margin="2,12" Grid.Row="5" Grid.ColumnSpan="2" Visibility="{Binding ShowSignpostText, Converter={StaticResource BoolToVisibility}}">
                           <local:AngleBorder Direction="Right" HorizontalAlignment="Left" Margin="4,10,0,0">
                              <TextBlock Text="Text:" Margin="4,0"/>
                           </local:AngleBorder>
                           <TextBox FontFamily="Consolas" AcceptsReturn="True" HorizontalAlignment="Right" Width="236" Text="{Binding SignpostText}" />
                        </StackPanel>

                        <!-- TODO break Arg into multiple pieces and show individual UI based on the value of Kind -->
                        <!--<local:AngleBorder Grid.Row="7" VerticalAlignment="Top" Direction="Left">
                           <TextBlock Text="Script Address:"/>
                        </local:AngleBorder>
                        <local:AngleTextBox Grid.Row="7" Grid.Column="1" VerticalAlignment="Top" Direction="Out" TextBinding="{Binding ScriptAddressText, UpdateSourceTrigger=PropertyChanged}" />-->
                     </Grid>
                  </DataTemplate>
               </ContentControl.Resources>
            </ContentControl>
         </DockPanel>
      </ScrollViewer>
      <ScrollViewer Grid.Column="0" Grid.RowSpan="2" Background="{DynamicResource Background}" Panel.ZIndex="1" Name="HeaderPanel"
         Width="{Binding ActualWidth, ElementName=BlockPanel}"
         Visibility="{Binding ShowHeaderPanel, Converter={StaticResource BoolToVisibility}}">
         <Grid DataContext="{Binding PrimaryMap.Header}" VerticalAlignment="Top">
            <Grid.ColumnDefinitions>
               <ColumnDefinition />
               <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
               <RowDefinition /> <RowDefinition />
               <RowDefinition /> <RowDefinition />
               <RowDefinition /> <RowDefinition />
               <RowDefinition /> <RowDefinition />
               <RowDefinition /> <RowDefinition />
            </Grid.RowDefinitions>

            <local:AngleBorder Direction="Left" Grid.Row="0">
               <TextBlock Text="Music:" />
            </local:AngleBorder>
            <local:AngleTextBox Grid.Row="0" Grid.Column="1" Direction="Out" HorizontalAlignment="Stretch" TextBinding="{Binding Music}" />

            <local:AngleBorder Direction="Left" Grid.Row="1">
               <TextBlock Text="Region Section ID:" />
            </local:AngleBorder>
            <local:AngleTextBox Grid.Row="1" Grid.Column="1" Direction="Out" HorizontalAlignment="Stretch" TextBinding="{Binding RegionSectionID}" />

            <local:AngleBorder Direction="Left" Grid.Row="2">
               <TextBlock Text="Cave:" />
            </local:AngleBorder>
            <local:AngleTextBox Grid.Row="2" Grid.Column="1" Direction="Out" HorizontalAlignment="Stretch" TextBinding="{Binding Cave}" />

            <local:AngleBorder Direction="Left" Grid.Row="3">
               <TextBlock Text="Weather:" />
            </local:AngleBorder>
            <local:AngleTextBox Grid.Row="3" Grid.Column="1" Direction="Out" HorizontalAlignment="Stretch" TextBinding="{Binding Weather}" />

            <local:AngleBorder Direction="Left" Grid.Row="4">
               <TextBlock Text="MapType:" />
            </local:AngleBorder>
            <local:AngleTextBox Grid.Row="4" Grid.Column="1" Direction="Out" HorizontalAlignment="Stretch" TextBinding="{Binding MapType}" />

            <local:AngleBorder Direction="Left" Grid.Row="5">
               <TextBlock Text="AllowBiking:" />
            </local:AngleBorder>
            <local:AngleTextBox Grid.Row="5" Grid.Column="1" Direction="Out" HorizontalAlignment="Stretch" TextBinding="{Binding AllowBiking}" />

            <local:AngleBorder Direction="Left" Grid.Row="6">
               <TextBlock Text="Flags:" />
            </local:AngleBorder>
            <local:AngleTextBox Grid.Row="6" Grid.Column="1" Direction="Out" HorizontalAlignment="Stretch" TextBinding="{Binding Flags}" />

            <local:AngleBorder Direction="Left" Grid.Row="7">
               <TextBlock Text="FloorNum:" />
            </local:AngleBorder>
            <local:AngleTextBox Grid.Row="7" Grid.Column="1" Direction="Out" HorizontalAlignment="Stretch" TextBinding="{Binding FloorNum}" />

            <local:AngleBorder Direction="Left" Grid.Row="8">
               <TextBlock Text="BattleType:" />
            </local:AngleBorder>
            <local:AngleTextBox Grid.Row="8" Grid.Column="1" Direction="Out" HorizontalAlignment="Stretch" TextBinding="{Binding BattleType}" />
         </Grid>
      </ScrollViewer>
      <ItemsControl Grid.Column="1" Grid.Row="1" Name="MapView" ItemsSource="{Binding VisibleMaps}"
                    SnapsToDevicePixels="True" ClipToBounds="True" Focusable="False"
                    MouseDown="ButtonDown" MouseMove="ButtonMove" MouseUp="ButtonUp" MouseWheel="Wheel">
         <ItemsControl.RenderTransform>
            <TranslateTransform/>
         </ItemsControl.RenderTransform>
         <ItemsControl.ItemsPanel>
            <ItemsPanelTemplate>
               <Canvas HorizontalAlignment="Center" VerticalAlignment="Center" ClipToBounds="False" SnapsToDevicePixels="True"/>
            </ItemsPanelTemplate>
         </ItemsControl.ItemsPanel>
         <ItemsControl.ItemContainerStyle>
            <Style>
               <Setter Property="Canvas.Top" Value="{Binding TopEdge}" />
               <Setter Property="Canvas.Left" Value="{Binding LeftEdge}" />
            </Style>
         </ItemsControl.ItemContainerStyle>
         <ItemsControl.ItemTemplate>
            <DataTemplate>
               <local:PixelImage />
            </DataTemplate>
         </ItemsControl.ItemTemplate>
      </ItemsControl>
      <ItemsControl Grid.Column="1" Grid.Row="1" Name="MapButtons" ItemsSource="{Binding MapButtons}" Focusable="False">
         <ItemsControl.ItemsPanel>
            <ItemsPanelTemplate>
               <Canvas HorizontalAlignment="Center" VerticalAlignment="Center" ClipToBounds="False" />
            </ItemsPanelTemplate>
         </ItemsControl.ItemsPanel>
         <ItemsControl.ItemContainerStyle>
            <Style>
               <Style.Triggers>
                  <DataTrigger Binding="{Binding AnchorLeftEdge}" Value="True">
                     <Setter Property="Canvas.Left" Value="{Binding AnchorPositionX}"/>
                  </DataTrigger>
                  <DataTrigger Binding="{Binding AnchorLeftEdge}" Value="False">
                     <Setter Property="Canvas.Right" Value="{Binding AnchorPositionX}"/>
                  </DataTrigger>
                  <DataTrigger Binding="{Binding AnchorTopEdge}" Value="True">
                     <Setter Property="Canvas.Top" Value="{Binding AnchorPositionY}"/>
                  </DataTrigger>
                  <DataTrigger Binding="{Binding AnchorTopEdge}" Value="False">
                     <Setter Property="Canvas.Bottom" Value="{Binding AnchorPositionY}"/>
                  </DataTrigger>
               </Style.Triggers>
            </Style>
         </ItemsControl.ItemContainerStyle>
         <ItemsControl.ItemTemplate>
            <DataTemplate>
               <Border MouseLeftButtonDown="ShifterDown" MouseMove="ShifterMove" MouseLeftButtonUp="ShifterUp" Width="20" Height="20" Background="{DynamicResource Backlight}">
                  <Path Name="Path" Fill="{DynamicResource Secondary}" Stretch="Uniform" />
                  <Border.ContextMenu>
                     <ContextMenu IsEnabled="{Binding EnableContextMenu}" ItemsSource="{Binding ContextItems}">
                        <ContextMenu.ItemContainerStyle>
                           <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                              <Setter Property="Header" Value="{Binding Text}" />
                              <Setter Property="Command" Value="{Binding}" />
                              <Setter Property="CommandParameter" Value="{Binding Parameter}" />
                           </Style>
                        </ContextMenu.ItemContainerStyle>
                     </ContextMenu>
                  </Border.ContextMenu>
               </Border>
               <DataTemplate.Triggers>
                  <DataTrigger Binding="{Binding Icon}" Value="LeftRight">
                     <Setter TargetName="Path" Property="Data" Value="{res:Icon ArrowsLeftRight}"/>
                  </DataTrigger>
                  <DataTrigger Binding="{Binding Icon}" Value="UpDown">
                     <Setter TargetName="Path" Property="Data" Value="{res:Icon ArrowsUpDown}"/>
                  </DataTrigger>
               </DataTemplate.Triggers>
            </DataTemplate>
         </ItemsControl.ItemTemplate>
      </ItemsControl>
      <Rectangle Grid.Column="1" Grid.Row="1" Name="HighlightCursorRect" StrokeThickness="2" IsHitTestVisible="False" Margin="-2,-2,0,0"
         HorizontalAlignment="Center" VerticalAlignment="Center" Stroke="{DynamicResource Backlight}"
         Width="{Binding HighlightCursorWidth, Mode=OneWay}" Height="{Binding HighlightCursorHeight, Mode=OneWay}">
         <Rectangle.RenderTransform>
            <TranslateTransform X="{Binding HighlightCursorX, Mode=OneWay}" Y="{Binding HighlightCursorY, Mode=OneWay}"/>
         </Rectangle.RenderTransform>
      </Rectangle>

      <!-- Toolbar -->
      <StackPanel Grid.Column="1" Orientation="Horizontal" Background="{DynamicResource Background}" Margin="1,0,1,5" Panel.ZIndex="2">
         <StackPanel Margin="5,0">
            <Button Width="12" Height="12" Padding="1" Command="{res:MethodCommand Zoom}" CommandParameter="{x:Static map:ZoomDirection.Enlarge}">
               <Path Stretch="Uniform" Fill="{DynamicResource Secondary}" Data="{res:Icon ThinPlus}" />
            </Button>
            <Button Width="12" Height="12" Padding="1" Command="{res:MethodCommand Zoom}" CommandParameter="{x:Static map:ZoomDirection.Shrink}">
               <Path Stretch="Uniform" Fill="{DynamicResource Secondary}" Data="{res:Icon ThinMinus}" />
            </Button>
         </StackPanel>
         <local:AngleButton Direction="Left" Content="Edit Map Header" IsChecked="{Binding ShowHeaderPanel}" Margin="5,0,0,0" />
         <local:AngleButton Direction="Out" Command="{Binding PrimaryMap.GotoWildData}" Margin="0,0,5,0" Width="110">
            <TextBlock>
               <TextBlock.Style>
                  <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                     <Setter Property="Text" Value="Goto Wild Data" />
                     <Style.Triggers>
                        <DataTrigger Binding="{Binding PrimaryMap.HasWildData}" Value="False">
                           <Setter Property="Text" Value="Create Wild Data" />
                        </DataTrigger>
                     </Style.Triggers>
                  </Style>
               </TextBlock.Style>
            </TextBlock>
         </local:AngleButton>
         <Border Width="24" Height="24" BorderThickness="1" BorderBrush="{DynamicResource Secondary}" Background="{DynamicResource Secondary}" MouseLeftButtonDown="EventTemplateDown" Margin="5,0,0,0" Tag="{x:Static map:EventCreationType.Object}" ToolTipService.InitialShowDelay="0" ToolTip="Drag to Create New Object">
            <local:PixelImage DataContext="{Binding Templates.ObjectTemplateImage}" VerticalAlignment="Center" HorizontalAlignment="Center" TransparentBrush="{DynamicResource Secondary}"/>
         </Border>
         <ToggleButton Padding="0" Width="12" Height="12" VerticalAlignment="Top" Name="ShowTemplateSettingsButton" IsChecked="{Binding ShowTemplateSettings}">
            <Path Data="{res:Icon Settings}" Fill="{DynamicResource Secondary}" Stretch="Uniform"/>
         </ToggleButton>
         <Popup DataContext="{Binding Templates}" IsOpen="{Binding IsChecked, ElementName=ShowTemplateSettingsButton}" PlacementTarget="{Binding ElementName=ShowTemplateSettingsButton}" Width="235" Height="220" StaysOpen="False">
            <Border BorderBrush="{DynamicResource Secondary}" BorderThickness="1" Background="{DynamicResource Background}">
               <Grid Margin="5">
                  <Grid.ColumnDefinitions>
                     <ColumnDefinition /> <ColumnDefinition />
                  </Grid.ColumnDefinitions>
                  <Grid.RowDefinitions>
                     <RowDefinition Height="Auto" />
                     <RowDefinition Height="Auto"/>
                     <RowDefinition Height="Auto" />
                     <RowDefinition Height="Auto" />
                  </Grid.RowDefinitions>
                  <StackPanel>
                     <local:AngleBorder Direction="Left">
                        <TextBlock Text="Template:"/>
                     </local:AngleBorder>
                     <Decorator>
                        <Decorator.Style>
                           <Style TargetType="Decorator">
                              <Setter Property="Visibility" Value="Collapsed" />
                              <Style.Triggers>
                                 <DataTrigger Binding="{Binding SelectedTemplate}" Value="Item">
                                    <Setter Property="Visibility" Value="Visible" />
                                 </DataTrigger>
                              </Style.Triggers>
                           </Style>
                        </Decorator.Style>
                        <local:AngleBorder Direction="Left" Margin="0,5">
                           <TextBlock Text="Item:"/>
                        </local:AngleBorder>
                     </Decorator>
                  </StackPanel>
                  <StackPanel Grid.Column="1">
                     <local:AngleComboBox Direction="Out" ItemsSource="{Binding AvailableTemplateTypes}" SelectedItem="{Binding SelectedTemplate}" />
                     <Decorator>
                        <Decorator.Style>
                           <Style TargetType="Decorator">
                              <Setter Property="Visibility" Value="Collapsed" />
                              <Style.Triggers>
                                 <DataTrigger Binding="{Binding SelectedTemplate}" Value="Item">
                                    <Setter Property="Visibility" Value="Visible" />
                                 </DataTrigger>
                              </Style.Triggers>
                           </Style>
                        </Decorator.Style>
                        <local:AngleComboBox Direction="Out" ItemsSource="{Binding ItemOptions}" SelectedIndex="{Binding ItemID}" Margin="0,5" />
                     </Decorator>
                  </StackPanel>
                  <StackPanel Grid.Row="1" Grid.ColumnSpan="2" Margin="0,10,0,0">
                     <StackPanel.Style>
                        <Style TargetType="StackPanel">
                           <Setter Property="Visibility" Value="Collapsed" />
                           <Style.Triggers>
                              <DataTrigger Binding="{Binding SelectedTemplate}" Value="Trainer">
                                 <Setter Property="Visibility" Value="Visible" />
                              </DataTrigger>
                           </Style.Triggers>
                        </Style>
                     </StackPanel.Style>
                     <!-- This trainer prefers to use a level <15> <Bug> pokemon from first <50> pokemon in the <Regional> pokedex. -->
                     <StackPanel Orientation="Horizontal">
                        <TextBlock Text="This trainer prefers to use" />
                     </StackPanel>
                     <StackPanel Orientation="Horizontal" Margin="0,5">
                        <local:AngleBorder Direction="Left">
                           <TextBlock Margin="0,0,2,0" Text="level" />
                        </local:AngleBorder>
                        <local:AngleTextBox Width="35" Direction="Out" TextBinding="{Binding MaxLevel, UpdateSourceTrigger=PropertyChanged}" />
                        <local:AngleComboBox Width="75" ItemsSource="{Binding TypeOptions}" SelectedIndex="{Binding PreferredType}" Direction="Right" />
                        <TextBlock Margin="2,0" Text="pokemon" />
                     </StackPanel>
                     <StackPanel Orientation="Horizontal">
                        <TextBlock Margin="2,0" Text="from the first" />
                        <local:AngleTextBox Width="35" Direction="Left" TextBinding="{Binding MaxPokedex, UpdateSourceTrigger=PropertyChanged}" />
                        <local:AngleButton Width="60" Padding="0" Height="18" Direction="Out" IsChecked="{Binding UseNationalDex}">
                           <local:AngleButton.Style>
                              <Style TargetType="local:AngleButton" BasedOn="{StaticResource {x:Type local:AngleButton}}">
                                 <Setter Property="Content" Value="Regional" />
                                 <Style.Triggers>
                                    <DataTrigger Binding="{Binding UseNationalDex}" Value="True">
                                       <Setter Property="Content" Value="National" />
                                    </DataTrigger>
                                 </Style.Triggers>
                              </Style>
                           </local:AngleButton.Style>
                        </local:AngleButton>
                        <TextBlock Margin="2,0" Text="pokemon." />
                     </StackPanel>
                  </StackPanel>
                  <Decorator Grid.ColumnSpan="2" Margin="5" HorizontalAlignment="Center" VerticalAlignment="Top">
                     <Decorator.Style>
                        <Style TargetType="Decorator">
                           <Setter Property="Visibility" Value="Collapsed" />
                           <Style.Triggers>
                              <DataTrigger Binding="{Binding SelectedTemplate}" Value="NPC">
                                 <Setter Property="Visibility" Value="Visible" />
                                 <Setter Property="Grid.Row" Value="1" />
                              </DataTrigger>
                              <DataTrigger Binding="{Binding SelectedTemplate}" Value="Trainer">
                                 <Setter Property="Visibility" Value="Visible" />
                                 <Setter Property="Grid.Row" Value="2" />
                              </DataTrigger>
                           </Style.Triggers>
                        </Style>
                     </Decorator.Style>
                     <local:AngleComboBox Direction="Out" MinWidth="50" ItemsSource="{Binding GraphicsOptions}" SelectedIndex="{Binding TrainerGraphics}">
                        <local:AngleComboBox.ItemsPanel>
                           <ItemsPanelTemplate>
                              <WrapPanel MaxWidth="256" />
                           </ItemsPanelTemplate>
                        </local:AngleComboBox.ItemsPanel>
                     </local:AngleComboBox>
                  </Decorator>
                  <Decorator Grid.Row="3" Grid.ColumnSpan="2" Margin="5" HorizontalAlignment="Center">
                     <Decorator.Style>
                        <Style TargetType="Decorator">
                           <Setter Property="Visibility" Value="Collapsed" />
                           <Style.Triggers>
                              <DataTrigger Binding="{Binding SelectedTemplate}" Value="Trainer">
                                 <Setter Property="Visibility" Value="Visible" />
                              </DataTrigger>
                           </Style.Triggers>
                        </Style>
                     </Decorator.Style>
                     <local:PixelImage DataContext="{Binding TrainerSprite}" TransparentBrush="{DynamicResource Background}" />
                  </Decorator>
               </Grid>
            </Border>
         </Popup>
         <Border Width="24" Height="24" BorderThickness="1" BorderBrush="{DynamicResource Secondary}" Background="{DynamicResource Accent}" MouseLeftButtonDown="EventTemplateDown" Margin="5,0" Tag="{x:Static map:EventCreationType.Warp}" ToolTipService.InitialShowDelay="0" ToolTip="Drag to Create New Warp">
            <TextBlock Text="W" HorizontalAlignment="Center" VerticalAlignment="Center" FontStyle="Italic" />
         </Border>
         <Border Width="24" Height="24" BorderThickness="1" BorderBrush="{DynamicResource Secondary}" Background="{DynamicResource Stream2}" MouseLeftButtonDown="EventTemplateDown" Margin="5,0" Tag="{x:Static map:EventCreationType.Script}" ToolTipService.InitialShowDelay="0" ToolTip="Drag to Create New Script">
            <TextBlock Text="Sc" HorizontalAlignment="Center" VerticalAlignment="Center" FontStyle="Italic" />
         </Border>
         <Border Width="24" Height="24" BorderThickness="1" BorderBrush="{DynamicResource Secondary}" Background="{DynamicResource Error}" MouseLeftButtonDown="EventTemplateDown" Margin="5,0" Tag="{x:Static map:EventCreationType.Signpost}" ToolTipService.InitialShowDelay="0" ToolTip="Drag to Create New Signpost">
            <TextBlock Text="Sp" HorizontalAlignment="Center" VerticalAlignment="Center" FontStyle="Italic" />
         </Border>
         <local:AngleBorder Direction="Left" VerticalAlignment="Stretch">
            <Border Width="50">
               <TextBlock Text="{Binding PrimaryMap.Name}" HorizontalAlignment="Center" />
            </Border>
         </local:AngleBorder>
         <local:AngleComboBox Height="18" Direction="Out" ItemsSource="{Binding PrimaryMap.AvailableNames}" SelectedIndex="{Binding PrimaryMap.SelectedNameIndex}" />
      </StackPanel>
      <Border Grid.Column="1" IsHitTestVisible="False" BorderBrush="{DynamicResource Secondary}" Background="{DynamicResource Background}" BorderThickness="0,0,0,1" Height="5" VerticalAlignment="Bottom" />
   </Grid>
</UserControl>
